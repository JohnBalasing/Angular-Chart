{"ast":null,"code":"import { BaseChartDirective } from 'ng2-charts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ng2-charts\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor() {\n      this.lineChartData = [{\n        data: [0, 1039, 200, 8001, 2026, 1900, 508, 980, 1801, 4256, 3255, 7010],\n        label: 'Paused Vehicle'\n      }];\n      this.lineChartLabels = ['January 2020', 'February 2020', 'March 2020', 'April 2020', 'June 2020', 'July 2020', 'August 2020', 'September 2020', 'October 2020', 'november 2020', 'December 2020'];\n      this.lineChartOptions = {\n        responsive: true,\n        maintainAspectRatio: true,\n        scales: {\n          yAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: 'Total Price'\n            },\n            ticks: {\n              // maxTicksLimit: 4,\n              fontStyle: 'normal',\n              fontSize: 13,\n              beginAtZero: false,\n              callback: value => {\n                return `$${value.toLocaleString()}`;\n              } // callback: ( value ) => {\n              //   return this.numberPipe.transform(value);\n              // },\n\n            },\n            gridLines: {\n              drawOnChartArea: false // color: '#676A6C',\n\n            }\n          }],\n          xAxes: [{\n            ticks: {\n              fontStyle: 'normal',\n              fontSize: 13,\n              autoSkip: false,\n              maxRotation: window.innerWidth < 1100 ? 90 : 0,\n              minRotation: window.innerWidth < 1100 ? 90 : 0\n            },\n            gridLines: {\n              drawOnChartArea: false,\n              // color: '#676A6C',\n              lineWidth: 1.5\n            }\n          }]\n        },\n        hover: {\n          mode: 'nearest',\n          intersect: true\n        }\n      };\n      this.lineChartColors = [{\n        backgroundColor: 'red',\n        borderColor: 'rgba(148,159,177,1)',\n        pointBackgroundColor: 'rgba(148,159,177,1)',\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'rgba(148,159,177,0.8)'\n      }];\n      this.lineChartLegend = true;\n      this.lineChartType = 'line';\n    }\n    /**\r\n     * Listen for Window Resizing\r\n     */\n\n\n    onResize() {\n      this.settChartAspectRatio();\n    }\n\n    ngOnInit() {\n      this.settChartAspectRatio();\n    }\n    /*\r\n    * sets the charts aspect ratio based on the width of the window\r\n    * */\n\n\n    settChartAspectRatio() {\n      let aspectRatio;\n\n      if (window.innerWidth < 1600 && window.innerWidth > 767) {\n        aspectRatio = 2;\n      }\n\n      if (window.innerWidth < 768) {\n        aspectRatio = 1.5;\n      }\n\n      if (window.innerWidth > 1600) {\n        aspectRatio = 3.5;\n      }\n\n      this.lineChartOptions.aspectRatio = aspectRatio;\n      this.chart.chart.aspectRatio = aspectRatio;\n      this.chart.chart.options.scales.xAxes[0].ticks.maxRotation = window.innerWidth < 1100 ? 90 : 0;\n      this.chart.chart.options.scales.xAxes[0].ticks.minRotation = window.innerWidth < 1100 ? 90 : 0;\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"my-app\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(BaseChartDirective, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chart = _t.first);\n      }\n    },\n    hostBindings: function AppComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"resize\", function AppComponent_resize_HostBindingHandler($event) {\n          return ctx.onResize($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    decls: 15,\n    vars: 6,\n    consts: [[1, \"col-8\"], [1, \"flex\"], [1, \"flex-item\"], [1, \"chart-wrapper\"], [\"baseChart\", \"\", 3, \"datasets\", \"labels\", \"options\", \"colors\", \"legend\", \"chartType\"], [1, \"col-4\"], [1, \"row\"], [1, \"col-6\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n        i0.ɵɵelement(4, \"canvas\", 4);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(5, \"div\", 5)(6, \"h1\");\n        i0.ɵɵtext(7, \"kjsdhfjshd\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 6)(9, \"div\", 7)(10, \"h1\");\n        i0.ɵɵtext(11, \"ksjdfksjdfsdfdsf\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 7)(13, \"h1\");\n        i0.ɵɵtext(14, \"ksjdfksjdfsdfdsf\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"datasets\", ctx.lineChartData)(\"labels\", ctx.lineChartLabels)(\"options\", ctx.lineChartOptions)(\"colors\", ctx.lineChartColors)(\"legend\", ctx.lineChartLegend)(\"chartType\", ctx.lineChartType);\n      }\n    },\n    directives: [i1.BaseChartDirective],\n    styles: [\"p[_ngcontent-%COMP%]{font-family:Lato}.chart-wrapper[_ngcontent-%COMP%]{width:100%;position:relative}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}